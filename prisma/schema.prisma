generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  email          String          @unique
  password       String          // Encrypted password
  role           Role
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  patients       Patient[]       // Patients created by this user
  medicalRecords MedicalRecord[] // Medical records created by this user
  prescriptions  Prescription[]  // Prescriptions created by this user
  labResults     LabResult[]     // Lab results created by this user
}

model Patient {
  id             Int             @id @default(autoincrement())
  fullName       String          @unique
  dateOfBirth    DateTime?
  phone          String?         @unique
  email          String?         @unique
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sex            Sex
  bloodGroup     BloodGroup
  medicalRecords MedicalRecord[] // Medical records for this patient
  prescriptions  Prescription[]  // Prescriptions for this patient
  labResults     LabResult[]     // Lab results for this patient
  User           User?           @relation(fields: [userId], references: [id], onDelete: Cascade) // User who created this patient
  userId         Int?
}

model MedicalRecord {
  id        Int      @id @default(autoincrement())
  patientId Int
  diagnosis String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade) // Patient associated with this medical record
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)    // User who created this medical record
  userId  Int?
}

model Prescription {
  id           Int      @id @default(autoincrement())
  patientId    Int
  medication   String
  dosage       String
  instructions String?
  prescribedAt DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade) // Patient associated with this prescription
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)    // User who created this prescription
  userId  Int?
}

model LabResult {
  id          Int      @id @default(autoincrement())
  patientId   Int
  testName    String
  result      String
  notes       String?
  performedAt DateTime
  createdAt   DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade) // Patient associated with this lab result
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)    // User who created this lab result
  userId  Int?
}

enum Role {
  ADMIN
  DOCTOR
}

enum Sex {
  MALE
  FEMALE
}

enum BloodGroup {
  A_PLUS   @map("A+")
  A_MINUS  @map("A-")
  B_PLUS   @map("B+")
  B_MINUS  @map("B-")
  AB_PLUS  @map("AB+")
  AB_MINUS @map("AB-")
  O_PLUS   @map("O+")
  O_MINUS  @map("O-")
}
